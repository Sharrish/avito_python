from typing import List
from colors import blue, yellow
import re


def char_to_num(char: str) -> int:
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç—Ä–æ–∫ (a,b,c) –≤ —á–∏—Å–ª–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å –º–∞—Ç—Ä–∏—Ü–µ–π"""
    return ord(char) - 97


def num_to_char(num: int) -> str:
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç —á–∏—Å–ª–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç—Ä–æ–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ –¥–æ—Å–∫–∏"""
    return str(chr(97 + num))


def get_board_size() -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–∞–∑–º–µ—Ä –¥–æ—Å–∫–∏ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥"""
    print('–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –∫—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏, –¥–∞–≤–∞–π—Ç–µ –∏–≥—Ä–∞—Ç—å :) \n')
    while True:
        input_value = input('-- –í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 3 –¥–æ 5): \n')
        try:
            board_size = int(input_value)
            if board_size in range(3, 6):
                return board_size
            else:
                print('–í–≤–µ–¥–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 3 –¥–æ 5 –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ')
        except ValueError:
            print('–≠—Ç–æ –Ω–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')


def color_mark(mark: str) -> str:
    """–†–∞–∑—É–∫—Ä–∞—à–∏–≤–∞–µ—Ç –º–µ—Ç–∫–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞ –Ω–∞ –¥–æ—Å–∫—É"""
    if mark == 'x':
        return blue(mark)
    elif mark == 'o':
        return yellow(mark)
    else:
        return ' '


def show_board(board_matrix: List):
    """–í—ã–≤–æ–¥–∏—Ç –≤ –∫–æ–Ω—Å–æ–ª—å –¥–æ—Å–∫—É —Å –∏–≥—Ä–æ–π"""
    size = len(board_matrix)
    print('\n  | ' + ' | '.join([str(x + 1) for x in range(size)]) + ' |')
    print('-' * (3 + 4 * size))
    for i, row in enumerate(board_matrix):
        print(f'{num_to_char(i)} | '
              + ' | '.join([color_mark(x) for x in row]) + ' |')
        print('-' * (3 + 4 * size))


def get_player_mark(player_id: int) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ id –∏–≥—Ä–æ–∫–∞ –º–µ—Ç–∫—É, –∫–æ—Ç–æ—Ä—É—é –∏–≥—Ä–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≤ –∏–≥—Ä–µ"""
    switcher = {
        1: 'x',
        2: 'o'
    }
    return switcher.get(player_id, '–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—à–∏–π –∏–≥—Ä–æ–∫')


def make_move(board_matrix: List, player_id: int):
    """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∏–≥—Ä–æ–∫—É —Å–¥–µ–ª–∞—Ç—å –≤–≤–æ–¥ —Ö–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª–∏ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"""
    while True:
        input_move = str(input(f'-- –í–∞—à —Ö–æ–¥ (–∏–≥—Ä–æ–∫ {player_id}): \n'))
        try:
            move = re.search(r'^([a-z])(\d+)$', input_move)
            row = char_to_num(move.group(1))
            column = int(move.group(2)) - 1

            if row < 0 or column < 0:
                raise Exception

            if board_matrix[row][column] is None:
                board_matrix[row][column] = get_player_mark(player_id)
                break
            else:
                print('–ö–ª–µ—Ç–∫–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
        except Exception:
            print('–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ —Ö–æ–¥–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')


def check_win_rows(board_matrix: List) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø–æ–ª–Ω–∏–ª –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–≥—Ä–æ–∫ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É —Å–≤–æ–∏–º–∏ –º–µ—Ç–∫–∞–º–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é.
    –ï—Å–ª–∏ –¥–∞, —Ç–æ —ç—Ç–æ—Ç –∏–≥—Ä–æ–∫ –∏ –±—É–¥–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º.
    """
    for row in board_matrix:
        if len(set(row)) == 1:
            if row[0] is not None:
                return True


def check_win_columns(board_matrix: List) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø–æ–ª–Ω–∏–ª –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–≥—Ä–æ–∫ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å—Ç–æ–ª–±–µ—Ü —Å–≤–æ–∏–º–∏ –º–µ—Ç–∫–∞–º–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é.
    –ï—Å–ª–∏ –¥–∞, —Ç–æ —ç—Ç–æ—Ç –∏–≥—Ä–æ–∫ –∏ –±—É–¥–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º.
    """
    transposed_matrix = list(map(list, zip(*board_matrix)))
    return check_win_rows(transposed_matrix)


def check_win_diag(board_matrix: List) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø–æ–ª–Ω–∏–ª –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–≥—Ä–æ–∫ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –¥–∏–∞–≥–æ–Ω–∞–ª—å —Å–≤–æ–∏–º–∏ –º–µ—Ç–∫–∞–º–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é.
    –ï—Å–ª–∏ –¥–∞, —Ç–æ —ç—Ç–æ—Ç –∏–≥—Ä–æ–∫ –∏ –±—É–¥–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º.
    """
    if len(set([board_matrix[i][i] for i in range(len(board_matrix))])) == 1:
        if board_matrix[0][0] is not None:
            return True
    if len(set([board_matrix[i][len(board_matrix) - i - 1]
                for i in range(len(board_matrix))])) == 1:
        if board_matrix[0][len(board_matrix) - 1] is not None:
            return True


def check_draw(move_count: int, board_size: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –ª–∏ –≤—Å–µ –∫–ª–µ—Ç–∫–∏ –Ω–∞ –¥–æ—Å–∫–µ. –ï—Å–ª–∏ –¥–∞, —Ç–æ —ç—Ç–æ –Ω–∏—á—å—è"""
    if move_count == board_size ** 2:
        return True


def game():
    """–°–æ–¥–µ—Ä–∂–∏—Ç –ª–æ–≥–∏–∫—É –∏–≥—Ä—ã –∫—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏"""
    board_size = get_board_size()
    matrix = [[None] * board_size for _ in range(board_size)]
    show_board(matrix)

    move_count = 0
    while True:
        player_id = (move_count % 2) + 1
        make_move(matrix, player_id)
        show_board(matrix)

        if check_win_rows(matrix) or check_win_columns(matrix) or check_win_diag(matrix):
            print(f'–ò–≥—Ä–æ–∫ {player_id} –ø–æ–±–µ–¥–∏–ª üéâ')
            break
        elif check_draw(move_count, board_size):
            print('–ü–æ–ª–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø–æ–ª–Ω–µ–Ω–æ - —ç—Ç–æ –Ω–∏—á—å—è')
            break

        move_count += 1


if __name__ == '__main__':
    game()
